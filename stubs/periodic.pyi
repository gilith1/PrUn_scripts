from _typeshed import Incomplete
from typing import Any, Awaitable, Callable

logger: Incomplete

class Periodic:
    def __init__(self, interval: float, coro: Callable[..., Awaitable[Any]], *args: Any, **kwargs: Any) -> None: ...
    @property
    def interval(self) -> float: ...
    @property
    def started(self) -> bool: ...
    @property
    def running(self) -> bool: ...
    @property
    def coro(self) -> Callable[..., Awaitable[Any]]: ...
    @property
    def args(self) -> tuple[Any, ...]: ...
    @property
    def kwargs(self) -> dict[str, Any]: ...
    async def start(self, delay: float = ...) -> None: ...
    async def stop(self, wait: float = ...) -> None: ...
